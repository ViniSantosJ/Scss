										Import

Ex:
@import "nome_do_arquivo.scss" 

Ele vai importar todo o conteúdo do arquivo e adicionará no arquivo css (na ordem).


										Variáveis

Ex: 
$cor_principal: #85C;


.teste {
	color: $cor_principal;
}

.teste2 {
	background-coloor: $cor_principal;
}


Para trocar a cor do .teste e .teste2, basta mudar o valor da variável.



										Nesting

-> É a capacidade de colocar um seletor dentro do outro.

Ex:

ul.menu {
	text-align: center;
	li {
		list-syle: none;
		display: inline-block;
		a {
			text-decoration: none;
			display: block;
			padding: 20px;
		}
	}
}

Ao ser compilado, irá transormar no seguinte CSS: 

ul.menu {
	text-align: center;
}

ul.menu li {
	list-style: none;
	display: inline-block;
}

ul.menu li a {
	text-decoration: none;
	display: block;
	padding: 20px;	
}



Agora se for feito da seguinte forma, por exemplo: 

.modal {
  h1 {
    color: $cor-primaria;

  }
  p {
    font-size: 1.2em;

  }
  a {
    display: block;

  }
}


Vai gerar o seguinte css: 

.modal h1 {
  color: blue;

}

.modal p {
  font-size: 1.2em;

}

.modal a {
  display: block;
}


Isso acontece pelo fato de que, foi colocado uma classe (.modal{ ) e aberto E fechado em seguida a tag h1 {...}
Depois aberto E fechado a tag p{...} e depois aberto E fechado a tag a{...} 



										& Nesting

-> É usado o & quando você quer que ''grude'' o elemento anterior.

Ex: 

ul.menu li {
	display: inline-block;
	a {
		display: block;
		&:hover {
			background-color: pink;
		}
	}
}

O resultado no css ficará assim:

ul.menu li {
	display: inline-block;
}

ul.menu li a {
	display: block;
}

ul.menu li a:hover {
	backgroud-color: pink;
}




										Mixins

-> Encapsula valores pra dentro de uma 'variável'

Ex: 

@mixin title-large {
	font-size: 4em;
	line-height: 1;
	font-weight: bold;
	font-family: monospace;
}

E para usar o mixin, basta fazer da seguinte forma: 

h1 {
	@include title-large;
}

No css, ficará assim: 

h1 {
	font-size: 4em;
	line-height: 1;
	font-weight: bold;
	font-family: monospace;
}

Também é possível ter mixin dentro de outro mixin.

@mixin title {
	font-weight: bold;
	font-family: monospace;
}

@mixin text-large {
	font-size: 4em;
	line-height: 1;
}

@mixin title-large {
	@include title;
	@include text-large;
}


										Os mixins aceitam ARGUMENTOS.

Ex: 

@mixin separador($color) {
	&::after {
		content: '';
		display: block;
		width: 100px;
		height: 4px;
		backgroud: $color;
	}
}

Ao incluir esse mixin em um h1, deve ser feito dessa maneira: 

h1 {
	@include separador(#84E);
}

O resultado no css ficará assim:

h1::after {
	content: '';
	display: block;
	width: 100px;
	height: 4px;
	background: #84E;
}

Também é possível passar mais de um ARGUMENTO, basta separar por vírgulas

Ex:

@mixin separador($color, $largura) {
	&::after {
		content: '';
		display: block;
		width: $largura;
		height: 4px;
		backgroud: $color;
	}
}

E para deixar um valor 'padrão' (caso não passe o argumento), basta fazer da seguinte forma: 

@mixin separador($color: blue, $largura: 100px)

Assim, se ao chamaro mixin separador e não for passado o argumento, o processador pegará os valores padrões e jogará no css.



										Argumentos...
										
Para quando for usar uma propriedade que usa vários parâmeotrs para a mesma função.

Ex: box-shadow: 10px 10px 0 0 rgba(0, 0, 0, 0.5), 
	 	 					  15px 15px 0 0 rgba(0, 0, 0, 0.5),
								20px 20px 0 0 rgba(0, 0, 0, 0.5);

Para que o interpretador não ache que está passando 3 argumentos neste caso, usasse dessa forma: 

@mixin box-shadow($shadow...) {
	box-shadow: $shadow;	
	-moz-box-shadow: $shadow;	
	-webkit-box-shadow: $shadow;	
}

E para chamar esse mixin: 

.modal {
	@include box-shadow(10px 10px 0 0 rgba(0, 0, 0, 0.5), 
	 	 							    15px 15px 0 0 rgba(0, 0, 0, 0.5),
											20px 20px 0 0 rgba(0, 0, 0, 0.5))
}



										@content

@mixin mobile {
	@media (max-widht: 600px) {
		@content;
	}	
}									

Sendo assim, ao chamar o mixin mobile, eu vou passar o conteúdo na hora da sua chamada. 

Ex: 

p {
	line-height: 1.4;
	max-widht: 400px;
	@include mobile {
			font-size: .6em;
	}
}


										%placeholder

Cria um estilo que não está atrelado a nada. 

Ex: 

%clearfix::after {
	content: '';
	display: table;
	clear: both;
}

div {
	@extend %clearfix;
}

section {
	@extend %clearfix;
}

No css ficará da seguinte maneira: 

div::after, section::after {
	content: '';
	display: table;
	clear: both;
}


										Operadores

Operadores comunds: Soma, subtração, maior, menor, etc.
Obs: Dá para somar cores.

Ex: 

p {
	font-size: 10px + 10;
}

Resultado:

p {
	font-size: 20px;
}


										Condicionais

IF

$tema: oceano;
$primary-color: black;
$secondary-color: gray;

@if $tema == oceano {
	$primary-color: blue;
	$secondary-color: orange;
} @else if $tema == deserto {
	$primary-color: yellow;
	$secondary-color: purple;
}

p {
	color: $primary-color;
	backgroud: $secondary-color;
}


O resultado: 

p {
	color: blue;
	background: orange;
}



										Funções
								Lighten e Darken

Lighten: Calcular a cor passada para ficar mais clara.		
Darken: Calcular a cor passada para ficar mais escura.

Ex: 
a {
	display:block;
	&:hover {
		background: lighten(blue, 20%);
	}
}

								Transparentize
Deixa o componente transparente.

Ex: 

a {
	display:block;
	&:hover {
    background: transparentize(#8844ee, 0.5);
	}
}


Obs: para mais functions, olhar na documentação do SASS.


E para criar uma function, basta fazer da seguinte forma: 

@function grid($colunas, $total: 16) {
	@return ($colunas / $total) * 960px;
}

E para chamar essa função: 

div {
	widht: grid(6);
}

O resultado será: 

div {
	width: 360px;
}

-> É bom para definir grids.